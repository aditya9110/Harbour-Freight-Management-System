package com.terminalMS.Service;

import java.util.ArrayList;
import java.util.List;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.terminalMS.DTO.FtrTerminalsDTO;
import com.terminalMS.Entity.FtrTerminalsEntity;
import com.terminalMS.Exception.TerminalNotFound;
import com.terminalMS.Repository.FtrTerminalsRepository;

@Service
public class FtrTerminalsService {
	private static int count = 11;

	@Autowired
	private FtrTerminalsRepository ftrRepo;

	@Transactional
	public FtrTerminalsDTO insertNewTerminal(FtrTerminalsDTO tdto) throws TerminalNotFound {
		FtrTerminalsEntity tr = ftrRepo.findByTerminalId(tdto.getTerminalId());
			tdto.setTerminalId("T" + autoGeneratedID());
			FtrTerminalsEntity tren = ftrRepo.saveAndFlush(FtrTerminalsDTO.convertToEntity(tdto));
			return tren.convertToDto(tren);
	}

	private int autoGeneratedID() {
		int id = count++;
		return id;
	}

	@Transactional
	public void insert() {
		FtrTerminalsDTO ftrdto = new FtrTerminalsDTO();
		ftrdto.setTerminalId("T5");
		ftrdto.setTerminalName("Brisbane");
		ftrdto.setCountry("Australia");
		ftrdto.setItemType("Electronics");
		ftrdto.setTerminalDescription("T5-Electronics");
		ftrdto.setCapacity(50000);
		ftrdto.setAvailableCapacity(12000);
		ftrdto.setStatus("NotAvailable");
		ftrdto.setHarborLocation("Sydney Harbor");

		FtrTerminalsEntity ftren = FtrTerminalsDTO.convertToEntity(ftrdto);
		FtrTerminalsEntity ftren1 = new FtrTerminalsEntity();
		System.out.println(ftren.toString());
		System.out.println(ftrRepo);
		if (ftren != null) {
			ftren1 = ftrRepo.saveAndFlush(ftren);
			System.out.println(ftren1.toString());
		}
	}

	public List<FtrTerminalsDTO> fetchFTRTerminals() throws TerminalNotFound {
		List<FtrTerminalsEntity> tren = ftrRepo.findAll();
		List<FtrTerminalsDTO> tdto = new ArrayList<>();
		if (tren == null) {
			throw new TerminalNotFound("Invalid Data");
		} else {
			tren.forEach(t -> {
				FtrTerminalsDTO terminals = t.convertToDto(t);
				tdto.add(terminals);
			});
			return tdto;
		}
	}

	public List<FtrTerminalsDTO> fetchFTRTerminalByItemType(String itemType) throws TerminalNotFound {

		List<FtrTerminalsEntity> terminalEntityByItemType = ftrRepo.findByItemType(itemType);

		List<FtrTerminalsDTO> termialDtoByItemType = new ArrayList();
		if (terminalEntityByItemType == null) {
			throw new TerminalNotFound("No such Item type exists");
		} else {
			terminalEntityByItemType.forEach(ten -> {
				FtrTerminalsDTO trdto = ten.convertToDto(ten);
				termialDtoByItemType.add(trdto);
			});
			return termialDtoByItemType;
		}
	}

	public FtrTerminalsDTO fetchterminalByTerminalId(String terminalId) throws TerminalNotFound {
		FtrTerminalsEntity tren = ftrRepo.findByTerminalId(terminalId);
		if (tren == null) {
			throw new TerminalNotFound("Terminal details not found for ID:" + terminalId);
		}
		FtrTerminalsDTO trdto = tren.convertToDto(tren);
		return trdto;
	}

	public String deleteById(String terminalId) {
		ftrRepo.deleteById(terminalId);
		String res = "Terminal details are deleted successfully.";
		return res;

	}

	public String updateTerminal(String terminalId, Integer newCapacity) {
		FtrTerminalsEntity tren = ftrRepo.findByTerminalId(terminalId);
		if (tren != null) {
				tren.setAvailableCapacity(newCapacity);
				ftrRepo.saveAndFlush(tren);
				if (tren.getAvailableCapacity() == tren.getCapacity()) {
					updateStatus(terminalId);
				}
				return "Terminal Capacity is successfully reduced for Id" + terminalId;
		} else {
			return "Terminal details not found for ID: T" + terminalId;
		}
	}

	public void updateStatus(String terminalId) {
		FtrTerminalsEntity tren = ftrRepo.findByTerminalId(terminalId);
		tren.setStatus("NotAvailable");
		ftrRepo.saveAndFlush(tren);
	}
}
